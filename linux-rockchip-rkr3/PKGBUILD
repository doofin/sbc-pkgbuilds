# AArch64 multi-platform
# Maintainer: Panda <panda@bredos.org>
# Maintainer: Bill Sideris <bill88t@bredos.org>

buildarch=8
_kernel=linux-rockchip-rkr3
pkgbase=$_kernel
pkgname=("${pkgbase}-headers" $pkgbase)
pkgver=6.1.75
pkgrel=14
epoch=2
arch=('aarch64')
license=('GPL2')
url="https://github.com/BredOS/linux-rockchip"
pkgdesc="The Linux Kernel and modules"
optdepends=('mali-G610-firmware-rkr4: Mali G610 firmware for Rockchip RK3588(S)')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc' 'git' 'uboot-tools' 'vboot-utils' 'dtc')
options=('!strip' 'ccache')
conflicts=('linux-rockchip-rk3588' 'linux-rockchip' 'linux-rockchip-rkr6' 'linux-rockchip-rkr1')
source=(
  'linux.preset'
  'config')
md5sums=(
  'SKIP'
  'SKIP')

prepare() {
  echo "doing prepare for building kernel with make!"
  echo "using config: ${srcdir}/config"
  cd linux-rockchip

  # copy the orange pi 5 config to .config for building
  cp ${srcdir}/config .config
  echo "copied config: ${srcdir}/config to .config"
}

# make prepare will generate some files like headers, but not compile
prepareMake() {
  # create empty files for .scmversion and localversion
  echo >.scmversion
  echo >localversion

  # modify makefile to add -rkr3 and other compiler flags
  echo "doing make olddefconfig prepare, should only run once"
  # add -Wno-array-compare -Wno-dangling-pointer -Wno-stringop-overread -Wno-misleading-indentation -Wno-address to makefile
  sed -i 's|-std=gnu89|-std=gnu89 -Wno-array-compare -Wno-dangling-pointer -Wno-stringop-overread -Wno-misleading-indentation -Wno-address -Wno-unused-function|g' Makefile

  # don't run below command for 2nd time
  make olddefconfig prepare

  # above command Update current config with .config provided by user
  # above command is not working, error:
  #   "6.1.75-rkr3 -rkr3 -rkr3 -rkr3 -rkr3 -rkr3 -rkr3 -rkr3 -rkr3 -rkr3" exceeds 64 characters
  # make[1]: *** [Makefile:1349: include/generated/utsrelease.h] Error 1

  # edit makefile to add -rkr3 to localversion

  # below command will add -rkr3 to EXTRAVERSION line multiple times!

  # sed -i 's|EXTRAVERSION =|EXTRAVERSION = -rkr3|g' Makefile
  sed -i 's|EXTRAVERSION =|EXTRAVERSION = -rkr3|g' Makefile
  echo "doing make kernelrelease"
  make -s kernelrelease >version
  unset LDFLAGS
}

build() {
  cd linux-rockchip

  echo "start building kernel! "
  prepareMake

  echo "make command: make ${MAKEFLAGS}"
  # MAKEFLAGS is empty!

  # make ${MAKEFLAGS} modules
  # make ${MAKEFLAGS} bzImage modules
  # make bzImage
  # make ${MAKEFLAGS} Image modules
  # echo "makeflags: ${MAKEFLAGS}"
  # make ${MAKEFLAGS} DTC_FLAGS="-@" dtbs
}

myMake() {
  echo "doing make kernel! "
  # copy the orange pi 5 config to .config for building
  cp ${srcdir}/config .config
  echo "copied config: ${srcdir}/config to .config"
  # below combines orange pi 5 config with the default config
  # so I don't need to enter prompts
  make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig prepare
  make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j4
  # make -j$(nproc) LOCALVERSION="-rkr3" ${MAKEFLAGS}
}

_package() {
  pkgdesc="The Linux Kernel and modules"
  depends=('coreutils' 'kmod' 'mkinitcpio>=0.7')
  optdepends=('wireless-regdb: to set the correct wireless channels of your country')
  provides=("linux-rockchip-rkr3=${pkgver}" "linux")
  backup=("etc/mkinitcpio.d/${_kernel}.preset")

  cd linux-rockchip
  echo "start package kernel! "

  local _version="$(<version)"
  echo "start install dtbs, modules, kernel, pwd: $(pwd)"
  echo "pkgdir: $pkgdir"

  # target not found: dtbs_install modules_install
  # install dtbs
  # make INSTALL_DTBS_PATH="${pkgdir}/boot/dtbs/" dtbs_install
  make INSTALL_DTBS_PATH="${pkgdir}/boot/dtbs/" dtbs
  echo "installed dtbs to: $pkgdir/boot/dtbs/"

  # install modules
  # make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install
  make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules
  echo "installed modules to: $pkgdir/usr/"

  # copy kernel
  install -Dm644 arch/arm64/boot/Image "$pkgdir/usr/lib/modules/$_version/vmlinuz"

  # remove build and source links
  rm "$pkgdir/usr/lib/modules/$_version"/{source,build}

  # Remove weaklinks file
  rm "$pkgdir/usr/lib/modules/$_version"/modules.weakdep

  # sed expression for following substitutions
  local _subst="
    s|%PKGBASE%|${_kernel}|g
  "

  # used by mkinitcpio to name the kernel
  echo "$_kernel" | install -Dm644 /dev/stdin "$pkgdir/usr/lib/modules/$_version/pkgbase"

  # install mkinitcpio preset file
  sed "$_subst" ../linux.preset |
    install -Dm644 /dev/stdin "$pkgdir/etc/mkinitcpio.d/$_kernel.preset"
}

_package-headers() {
  pkgdesc="The Linux Kernel and modules - Headers"
  provides=("linux-headers=${pkgver}" "linux-rockchip-rkr3-headers=${pkgver}")

  cd linux-rockchip
  echo "start package kernel headers! "
  local _version="$(<version)"
  local builddir="$pkgdir/usr/lib/modules/$_version/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map version
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/arm64" -m644 arch/arm64/Makefile
  cp -t "$builddir" -a scripts

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/arm64" -a arch/arm64/include
  install -Dt "$builddir/arch/arm64/kernel" -m644 arch/arm64/kernel/asm-offsets.s
  mkdir -p "$builddir/arch/arm"
  cp -t "$builddir/arch/arm" -a arch/arm/include

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */arm64/ || $arch == */arm/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
    application/x-sharedlib\;*) # Libraries (.so)
      strip -v $STRIP_SHARED "$file" ;;
    application/x-archive\;*) # Libraries (.a)
      strip -v $STRIP_STATIC "$file" ;;
    application/x-executable\;*) # Binaries
      strip -v $STRIP_BINARIES "$file" ;;
    application/x-pie-executable\;*) # Relocatable binaries
      strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name -print0)

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$_kernel"
}

for _p in ${pkgname[@]}; do
  eval "package_${_p}() {
    _package${_p#${_kernel}}
  }"
done
